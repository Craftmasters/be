<?php
/**
 * Bullseye account module.
 */

/**
 * Implements hook_menu().
 */
function bullseye_account_menu() {
  $items = array();

  $items['accounts/new/lead'] = array(
    'title' => t('Add New Lead'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/new/prospect'] = array(
    'title' => t('Add New Prospect'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/new/opportunity'] = array(
    'title' => t('Add New Opportunity'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/new/deal-in-progress'] = array(
    'title' => t('Add New Deal in Progress'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/select-existing-company'] = array(
    'title' => t('Select Existing Company for Lead'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('select_existing_company'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/delete'] = array(
    'title' => t('Delete Items'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('accounts_delete_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['edit/account-details'] = array(
    'title' => t('Edit Account Details'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_account_details_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['edit/contact-person'] = array(
    'title' => t('Edit Contact Person'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_form().
 *
 * Select existing company form.
 */
function select_existing_company($form, &$form_state) {
  $form = array();

  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  if ($_GET['from'] == 'lead') {
    $label = 'lead';
  }
  elseif ($_GET['from'] == 'prospect') {
    $label = 'prospect';
  }
  elseif ($_GET['from'] == 'opportunity') {
    $label = 'opportunity';
  }
  elseif ($_GET['from'] == 'deal-in-progress') {
    $label = 'deal in progress';
  }

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . t('Select the existing company for the new ' . $label) . '</h2>',
  );

  $form['account'] = array(
    '#required' => TRUE,
    '#type' => 'entityreference',
    '#era_entity_type' => 'node',
    '#era_bundles' => array('accounts'),
    '#era_cardinality' => 1,
    '#era_query_settings' => array(
      'limit' => 15, // Default is 50.
      'property_conditions' => array(
        array('status', 1, '='),
      ),
      'field_conditions' => array(),
    ),
    '#attributes' => array(
      'placeholder' => t('Enter existing company'),
    ),
  );

  $form['submit_container'] = array(
    '#type' => 'container',
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Next'),
  );

  return $form;
}

/**
 * Submit handler or selecting existing company.
 */
function select_existing_company_submit($form, &$form_state) {

  $nid = $form_state['values']['account']['entity_id'];
  $account_status = Bullseye::getAccountStatusByNid($nid);

  $arg = $account_status;

  if ($account_status == 'deal_in_progress') {
    $arg = 'deal-in-progress';
  }
  if ($account_status == 'closed_deal') {
    $arg = 'closed-deal';
  }
  if ($arg == '') {
    $arg = 'lead';
  }

  $param = array(
    'query' => array(
      'existing_company' => $nid,
      'account_status' => $account_status,
    )
  );

  // Go to the add new lead modal.
  drupal_goto('accounts/new/' . $arg, $param);
}

/**
 * Implements hook_form().
 *
 * Delete accounts form.
 */
function accounts_delete_form($form, &$form_state) {

  $form = array();

  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  if (isset($_GET['ids']) && !empty($_GET['ids'])) {

    $ids = $_GET['ids'];
    $ids = explode(',', $ids);

    // Removing empty values.
    foreach ($ids as $key => $value) {
      if ($value == '') {
        unset($ids[$key]);
      }
    }
    $ids = array_unique($ids);

    $items_div = '';

    foreach ($ids as $key => $value) {
      $contact = Bullseye::getContactDetailsById($value);
      $company_nid = Bullseye::getCompanyNidOfContact($value);
      $company_name = Bullseye::getCompanyNameByNid($company_nid);
      $firstname = $contact['field_firstname_value'];
      $lastname = $contact['field_lastname_value'];
      $name = $firstname . ' ' . $lastname;
      $position = $contact['field_position_value'];
      $markup = $name . ' (' . $position . ', ' . $company_name . ')';
      $items_div .= '<div class="be-item">' . $markup . '</div>';
    }

    $form['form_title'] = array(
      '#prefix' => '<div class="form-title">',
      '#suffix' => '</div>',
      '#markup' => '<h2>' . t('Are you sure you want to delete the following items?') . '</h2>',
    );

    $form['items'] = array(
      '#prefix' => '<div class="be-items-multiple">',
      '#markup' => $items_div,
      '#suffix' => '</div>',
    );

    $form['submit_container'] = array(
      '#type' => 'container',
    );

    $form['submit_container']['cancel'] = array(
      '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
    );

    $form['submit_container']['submit'] = array(
      '#type' => 'submit',
      '#attributes' => array(
        'class' => array('green-btn'),
      ),
      '#value' => t('Delete'),
    );
  }
  else {
    $form['form_title'] = array(
      '#prefix' => '<div class="form-title">',
      '#suffix' => '</div>',
      '#markup' => '<h2>' . t('You did not select any items. Please select items first.') . '</h2>',
    );

    $form['submit_container'] = array(
      '#type' => 'container',
    );

    $form['submit_container']['cancel'] = array(
      '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Close</a>',
    );
  }



  return $form;
}

/**
 * Submit handler for Delete accounts form.
 */
function accounts_delete_form_submit($form, &$form_state) {
  $ids = $_GET['ids'];
  $from = $_GET['from'];
  $ids = explode(',', $ids);

  // Removing empty values.
  foreach ($ids as $key => $value) {
    if ($value == '') {
      unset($ids[$key]);
    }
  }

  // Collect the IDS of the contact for deletion.
  $ids = array_unique($ids);
  $nids = array();

  // Get the company nids of the contact.
  foreach ($ids as $key1 => $value1) {
    $nid = Bullseye::getCompanyNidOfContact($value1);
    $nids[] = $nid;
  }

  // Delete the selected contacts.
  entity_delete_multiple('field_collection_item', $ids);

  // Loop through the company nids and check
  // wether they still have contacts or not.
  foreach ($nids as $key2 => $value2) {
    // Clear the cache first before checking.
    cache_clear_all('contacts_' . $value2, 'cache');

    $contacts = Bullseye::getAccountPeople($value2);
    $count = count($contacts);

    if ($count == 0 || empty($count)) {
      // Delete the account if there is no more contacts.
      node_delete($value2);
    }
  }

  if ($from == 'accounts') {

    // For Admin
    cache_clear_all('leads_listing', 'cache');
    cache_clear_all('admin_leads', 'cache');
    cache_clear_all('prospect_accounts_listing', 'cache');
    cache_clear_all('count_prospect_accounts_listing', 'cache');
    cache_clear_all('opportunity_accounts_listing', 'cache');
    cache_clear_all('count_opportunity_accounts_listing', 'cache');
    cache_clear_all('deal_in_progress_accounts_listing', 'cache');
    cache_clear_all('count_deals_accounts_listing', 'cache');
    cache_clear_all('closed_deals_accounts_listing', 'cache');
    cache_clear_all('count_closed_deals_accounts_listing', 'cache');

    // For Producer
    cache_clear_all('producer_leads_listing', 'cache', TRUE);
    cache_clear_all('producer_leads', 'cache', TRUE);
    cache_clear_all('prospect_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_prospect_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('opportunity_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_opportunity_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('deal_in_progress_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_deals_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('closed_deals_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_closed_deals_accounts_listing_producer', 'cache', TRUE);

  }
  elseif ($from == 'leads') {
    cache_clear_all('leads_listing', 'cache');
    cache_clear_all('admin_leads', 'cache');
    cache_clear_all('producer_leads_listing', 'cache', TRUE);
    cache_clear_all('producer_leads', 'cache', TRUE);
  }
  elseif ($from == 'prospects') {
    cache_clear_all('prospect_accounts_listing', 'cache');
    cache_clear_all('count_prospect_accounts_listing', 'cache');
    cache_clear_all('prospect_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_prospect_accounts_listing_producer', 'cache', TRUE);
  }
  elseif ($from == 'opportunities') {
    cache_clear_all('opportunity_accounts_listing', 'cache');
    cache_clear_all('count_opportunity_accounts_listing', 'cache');
    cache_clear_all('opportunity_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_opportunity_accounts_listing_producer', 'cache', TRUE);
  }
  elseif ($from == 'deals_in_progress') {
    cache_clear_all('deal_in_progress_accounts_listing', 'cache');
    cache_clear_all('count_deals_accounts_listing', 'cache');
    cache_clear_all('deal_in_progress_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_deals_accounts_listing_producer', 'cache', TRUE);
  }
  elseif ($from == 'closed_deals') {
    cache_clear_all('closed_deals_accounts_listing', 'cache');
    cache_clear_all('count_closed_deals_accounts_listing', 'cache');
    cache_clear_all('closed_deals_accounts_listing_producer', 'cache', TRUE);
    cache_clear_all('count_closed_deals_accounts_listing_producer', 'cache', TRUE);
  }

  cache_clear_all('count_accounts_listing', 'cache');
  cache_clear_all('accounts_listing', 'cache');
  cache_clear_all('accounts_listing_producer_', 'cache', TRUE);
  cache_clear_all('producer_total_accounts_', 'cache', TRUE);

  drupal_set_message('Successfully deleted items.');

}

/**
 * Form for adding new accounts.
 */
function bullseye_account_new_form($form, &$form_state) {

  global $user;

  $form = array();
  $form['#parents'] = array();
  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  // Company Details.
  $company = '';
  $contact_type = 'accounts';
  $owner = '';
  $business_type = '';
  $work_phone = '';
  $work_website = '';
  $address = '';
  $city = '';
  $field_states = '';
  $zip_code = '';
  $visibility = 'visible_to_admin';
  $tags = '';
  $tids = array();

  // Contact Person Details.
  $firstname = '';
  $middlename = '';
  $lastname = '';
  $title = '';
  $work_email = '';
  $mobile_phone = '';
  $linkedin = '';
  $facebook = '';
  $description = '';
  $fid = '';

  $node = new stdClass();
  $node->type = 'accounts';

  if (arg(2) == 'lead') {
    $form_title = t('Add New Lead');
  }
  elseif (arg(2) == 'prospect') {
    $form_title = t('Add New Prospect');
  }
  elseif (arg(2) == 'opportunity') {
    $form_title = t('Add New Opportunity');
  }
  elseif (arg(2) == 'deal-in-progress') {
    $form_title = t('Add New Deal in Progress');
  }

  // If from add new lead and the company is already existing.
  if (isset($_GET['existing_company']) && !empty($_GET['existing_company'])) {
    $nid = $_GET['existing_company'];
    $account_status = $_GET['account_status'];
    $company = Bullseye::getCompanyNameByNid($nid);
    $owner = Bullseye::getOwnerByNid($nid);
    $contact_type = Bullseye::getAccountTypeByNid($nid);
    $work_phone = Bullseye::getPhoneNumberByNid($nid);
    $work_website = Bullseye::getWebsiteByNid($nid);
    $address = Bullseye::getStreetAddressByNid($nid);
    $city = Bullseye::getCityByNid($nid);
    $field_states = Bullseye::getStateByNid($nid);
    $zip_code = Bullseye::getZipCodeByNid($nid);
    $visibility = Bullseye::getVisibilityByNid($nid);
    $business_type = Bullseye::getBusinessTypeByNid($nid);
    $node = node_load($nid);

    if ($account_status == 'lead') {
      $form_title = t('Add New Lead');
    }
    elseif ($account_status == 'prospect') {
      $form_title = t('Add New Prospect');
    }
    elseif ($account_status == 'opportunity') {
      $form_title = t('Add New Opportunity');
    }
    elseif ($account_status == 'deal-in-progress') {
      $form_title = t('Add New Deal in Progress');
    }
  }

  // If from accounts tab edit modal.
  if (isset($_GET['contact_id']) && !empty($_GET['contact_id'])) {
    unset($form_title);
    $contact_id = $_GET['contact_id'];
    $contact = Bullseye::getContactDetailsById($contact_id);
    $firstname = $contact['field_firstname_value'];
    $middlename = $contact['field_middle_name_value'];
    $lastname = $contact['field_lastname_value'];
    $title = $contact['field_position_value'];
    $work_email = $contact['field_email_value'];
    $mobile_phone = $contact['field_mobile_phone_value'];
    $linkedin = $contact['field_linkedin_personal_value'];
    $facebook = $contact['field_facebook_personal_value'];
    $description = $contact['field_details_value'];
    $fid = $contact['field_profile_picture_fid'];
  }

  module_load_include('inc', 'field_collection', 'field_collection.pages');
  module_load_include('inc', 'node', 'node.pages');

  if (isset($form_title)) {
    $form['form_title'] = array(
      '#prefix' => '<div class="form-title">',
      '#suffix' => '</div>',
      '#markup' => '<h2>' . $form_title . '</h2>',
    );
  }

  $form['profile_picture'] = array(
    '#type' => 'managed_file',
    '#default_value' => $fid,
    '#title' => t('Profile Picture'),
  );

  $form['firstname'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('First Name'),
    ),
    '#default_value' => $firstname,
  );

  $form['middlename'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Middle Name'),
    ),
    '#default_value' => $middlename,
  );

  $form['lastname'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Last Name'),
    ),
    '#default_value' => $lastname,
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Company'),
    '#attributes' => array(
      'placeholder' => t('Add Company'),
    ),
    '#default_value' => $company,
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Title'),
    '#attributes' => array(
      'placeholder' => t('Add Title'),
    ),
    '#default_value' => $title,
  );

  $form['contact_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#options' => array(
      'accounts' => t('Account'),
      'referrals' => t('Referral Partner'),
      'producers' => t('Producer'),
    ),
    '#default_value' => $contact_type,
  );

  $form['owner'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner'),
    '#attributes' => array(
      'placeholder' => t('Add Owner'),
    ),
    '#default_value' => $owner,
  );

  $form['business_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Type'),
    '#attributes' => array(
      'placeholder' => t('Business Type'),
    ),
    '#default_value' => $business_type,
  );

  $form['work_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Email'),
    '#attributes' => array(
      'placeholder' => t('Add Email'),
    ),
    '#default_value' => $work_email,
  );

  $form['work_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Phone'),
    '#attributes' => array(
      'placeholder' => t('Add Phone'),
    ),
    '#default_value' => $work_phone,
  );

  $form['mobile_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile Phone'),
    '#attributes' => array(
      'placeholder' => t('Mobile Phone'),
    ),
    '#default_value' => $mobile_phone,
  );

  $form['work_website'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Website'),
    '#attributes' => array(
      'placeholder' => t('Add Website'),
    ),
    '#default_value' => $work_website,
  );

  $form['linkedin'] = array(
    '#type' => 'textfield',
    '#title' => t('LinkedIn'),
    '#attributes' => array(
      'placeholder' => t('Add Social'),
    ),
    '#default_value' => $linkedin,
  );

  $form['facebook'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook'),
    '#attributes' => array(
      'placeholder' => t('Add Social'),
    ),
    '#default_value' => $facebook,
  );

  $form['address'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Street'),
    ),
    '#default_value' => $address,
  );

  $form['city'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('City'),
    ),
    '#default_value' => $city,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field1 = field_info_field('field_states');
  $instance1 = field_info_instance('node', 'field_states', 'accounts');
  $items1 = field_get_items('node', $node, 'field_states');
  $my_field1 = field_default_form('node', $node, $field1, $instance1, LANGUAGE_NONE, $items1, $form, $form_state);
  $form += (array) $my_field1;
  $form['field_states'][LANGUAGE_NONE]['#title'] = '';

  $form['zip_code'] = array(
    '#type' => 'textfield',
    '#weight' => 26,
    '#attributes' => array(
      'placeholder' => t('Zip Code'),
    ),
    '#default_value' => $zip_code,
  );

  $visibility_options = Bullseye::getVisibilityOptions();

  $form['visibility'] = array(
    '#type' => 'select',
    '#title' => t('Visibility'),
    '#options' => $visibility_options,
    '#default_value' => $visibility,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field = field_info_field('field_tags');
  $instance = field_info_instance('node', 'field_tags', 'accounts');
  $items = field_get_items('node', $node, 'field_tags');
  $my_field = field_default_form('node', $node, $field, $instance, LANGUAGE_NONE, $items, $form, $form_state);
  $form += (array) $my_field;
  $form['field_tags'][LANGUAGE_NONE]['#attributes'] = array(
    'placeholder' => t('+ Enter groups separated by commas ...'),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#attributes' => array(
      'placeholder' => t('Add Description'),
    ),
    '#weight' => 29,
    '#default_value' => $description,
  );

  $form['submit_container'] = array(
    '#type' => 'container',
    '#weight' => 30,
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit Handler for adding new leads.
 */
function bullseye_account_new_form_submit($form, &$form_state) {
  global $user;

  // Contact Details.
  $firstname = $form_state['values']['firstname'];
  $middlename = $form_state['values']['middlename'];
  $lastname = $form_state['values']['lastname'];
  $title = $form_state['values']['title'];
  $work_email = $form_state['values']['work_email'];
  $mobile_phone = $form_state['values']['mobile_phone'];
  $linkedin = $form_state['values']['linkedin'];
  $facebook = $form_state['values']['facebook'];
  $description = $form_state['values']['description'];

  // Company Details.
  $company = $form_state['values']['company'];
  $contact_type = $form_state['values']['contact_type'];
  $owner = $form_state['values']['owner'];
  $business_type = $form_state['values']['business_type'];
  $work_phone = $form_state['values']['work_phone'];
  $work_website = $form_state['values']['work_website'];
  $address = $form_state['values']['address'];
  $city = $form_state['values']['city'];
  $field_states = $form_state['values']['field_states'][LANGUAGE_NONE][0]['tid'];
  $zip_code = $form_state['values']['zip_code'];
  $visibility = $form_state['values']['visibility'];
  $tags = $form_state['values']['field_tags'][LANGUAGE_NONE];
  $tids = array();

  if (isset($_GET['existing_company']) && !empty($_GET['existing_company'])) {
    $node = node_load($_GET['existing_company']);
  }
  else {
    $node = new stdClass();
    $node->type = 'accounts';
    $node->uid = $user->uid;
    node_object_prepare($node);
    $node->language = LANGUAGE_NONE;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  $wrapper->title->set($company);
  $wrapper->status->set(1);
  $wrapper->field_type->set($contact_type);
  $wrapper->field_owned_by->set($owner);
  $wrapper->field_type_of_business->set($business_type);
  $wrapper->field_work_phone->set($work_phone);
  $wrapper->field_work_website->set($work_website);
  $wrapper->field_street->set($address);
  $wrapper->field_city->set($city);
  $wrapper->field_states->set($field_states);
  $wrapper->field_postal_code->set($zip_code);
  $wrapper->field_visibility->set($visibility);

  if (empty($_GET['existing_company']) || $_GET['existing_company'] == '')  {
    if (arg(2) == 'lead') {
      $wrapper->field_account_status->set('lead');
      $wrapper->field_action_status->set('verify_sca_dbra');
      $wrapper->field_workflow_status->set('verification');
    }
    elseif (arg(2) == 'prospect') {
      $wrapper->field_account_status->set('prospect');
      $wrapper->field_action_status->set('send_email');
      $wrapper->field_workflow_status->set('engagement');
    }
    elseif (arg(2) == 'opportunity') {
      $wrapper->field_account_status->set('opportunity');
      $wrapper->field_action_status->set('request_specifications');
      $wrapper->field_workflow_status->set('plan_specification');
    }
    elseif (arg(2) == 'deal-in-progress') {
      $wrapper->field_account_status->set('deal_in_progress');
      $wrapper->field_action_status->set('draw_documents');
      $wrapper->field_workflow_status->set('generate_trust_agreement');
    }
  }

  // Saving the tags.
  if (!empty($tags)) {
    foreach ($tags as $key => $value) {
      $tag = trim($value['name']);

      $result = db_query('SELECT t.tid FROM {taxonomy_term_data} t WHERE t.name = :name AND t.vid = 1', array(':name' => $tag));
      $record = $result->fetchAssoc();

      if (!empty($record)) {
        $tids[] = $record['tid'];
      }
      else {
        $term = new stdClass();
        $term->name = $value['name'];
        $term->vid = 1;
        taxonomy_term_save($term);
        $tids[] = $term->tid;
      }

    }
    $wrapper->field_tags->set($tids);
  }
  else {
    $wrapper->field_tags->set(array());
  }
  $wrapper->save();

  $nid = $wrapper->getIdentifier();
  $node = node_load($nid);

  // If from accounts tab edit modal.
  if (isset($_GET['contact_id']) && !empty($_GET['contact_id'])) {
    $cid = $_GET['contact_id'];
    $collection = field_collection_item_load($cid);
  }
  else {
    $collection = entity_create('field_collection_item', array('field_name' => 'field_contacts'));
    $collection->setHostEntity('node', $node);
  }

  // Saving/updating the contact.
  $cwrapper = entity_metadata_wrapper('field_collection_item', $collection);
  $cwrapper->field_firstname->set($firstname);
  $cwrapper->field_middle_name->set($middlename);
  $cwrapper->field_lastname->set($lastname);
  $cwrapper->field_if_primary_contact->set('no');
  if (empty($_GET['existing_company']) || $_GET['existing_company'] == '')  {
    $cwrapper->field_if_primary_contact->set('yes');
  }
  $cwrapper->field_position->set($title);
  $cwrapper->field_email->set($work_email);
  $cwrapper->field_mobile_phone->set($mobile_phone);
  $cwrapper->field_linkedin_personal->set($linkedin);
  $cwrapper->field_facebook_personal->set($facebook);
  $cwrapper->field_details->set($description);

  // Saving the starred field.
  if (isset($_GET['contact_id']) && !empty($_GET['contact_id'])) {
    $starred = $cwrapper->field_starred->value();
    $cwrapper->field_starred->set($starred);
  }
  else {
    $cwrapper->field_starred->set(array());
  }

  // Producer Agreement file.
  if ($form_state['values']['profile_picture'] != 0) {
    $pp_file = file_load($form_state['values']['profile_picture']);
    $pp_file->display = 1;
    $pp_file = file_copy($pp_file, 'public://');
    $pp_file = (array) $pp_file;
    $cwrapper->field_profile_picture->set($pp_file);
  }
  else {
    $cwrapper->field_profile_picture->set(NULL);
  }

  $cwrapper->save();

  cache_clear_all('count_accounts_listing', 'cache');
  cache_clear_all('accounts_listing', 'cache');
  cache_clear_all('accounts_listing_producer_', 'cache', TRUE);
  cache_clear_all('producer_total_accounts_', 'cache', TRUE);

  if (isset($_GET['account_status']) && !empty($_GET['account_status']) && !isset($_GET['contact_id'])) {
    if ($_GET['account_status'] == 'lead') {
      drupal_set_message('Successfully added new lead.');
      cache_clear_all('leads_listing', 'cache');
      cache_clear_all('admin_leads', 'cache');
      cache_clear_all('producer_leads_listing', 'cache', TRUE);
      cache_clear_all('producer_leads', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'prospect') {
      drupal_set_message('Successfully added new prospect.');
      cache_clear_all('prospect_accounts_listing', 'cache');
      cache_clear_all('count_prospect_accounts_listing', 'cache');
      cache_clear_all('prospect_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_prospect_accounts_listing_producer', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'opportunity') {
      drupal_set_message('Successfully added new opportunity.');
      cache_clear_all('opportunity_accounts_listing', 'cache');
      cache_clear_all('count_opportunity_accounts_listing', 'cache');
      cache_clear_all('opportunity_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_opportunity_accounts_listing_producer', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'deal_in_progress') {
      cache_clear_all('deal_in_progress_accounts_listing', 'cache');
      cache_clear_all('count_deals_accounts_listing', 'cache');
      cache_clear_all('deal_in_progress_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_deals_accounts_listing_producer', 'cache', TRUE);
    }
    cache_clear_all('contacts_' . $nid, 'cache');
  }
  elseif (isset($_GET['account_status']) && !empty($_GET['account_status']) && isset($_GET['contact_id'])) {
    if ($_GET['account_status'] == 'lead') {
      drupal_set_message('Successfully updated lead.');
      cache_clear_all('leads_listing', 'cache');
      cache_clear_all('admin_leads', 'cache');
      cache_clear_all('producer_leads_listing', 'cache', TRUE);
      cache_clear_all('producer_leads', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'prospect') {
      drupal_set_message('Successfully updated prospect.');
      cache_clear_all('prospect_accounts_listing', 'cache');
      cache_clear_all('count_prospect_accounts_listing', 'cache');
      cache_clear_all('prospect_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_prospect_accounts_listing_producer', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'opportunity') {
      drupal_set_message('Successfully updated opportunity.');
      cache_clear_all('opportunity_accounts_listing', 'cache');
      cache_clear_all('count_opportunity_accounts_listing', 'cache');
      cache_clear_all('opportunity_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_opportunity_accounts_listing_producer', 'cache', TRUE);
    }
    elseif ($_GET['account_status'] == 'deal_in_progress') {
      drupal_set_message('Successfully updated deal in progress.');
      cache_clear_all('deal_in_progress_accounts_listing', 'cache');
      cache_clear_all('count_deals_accounts_listing', 'cache');
      cache_clear_all('deal_in_progress_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_deals_accounts_listing_producer', 'cache', TRUE);
    }
    cache_clear_all('contact_details_' . $_GET['contact_id'], 'cache');
  }
  else {
    if (arg(2) == 'lead') {
      drupal_set_message('Successfully added new lead.');
      cache_clear_all('leads_listing', 'cache');
      cache_clear_all('admin_leads', 'cache');
      cache_clear_all('producer_leads_listing', 'cache', TRUE);
      cache_clear_all('producer_leads', 'cache', TRUE);
    }
    elseif (arg(2) == 'prospect') {
      drupal_set_message('Successfully added new prospect.');
      cache_clear_all('prospect_accounts_listing', 'cache');
      cache_clear_all('count_prospect_accounts_listing', 'cache');
      cache_clear_all('prospect_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_prospect_accounts_listing_producer', 'cache', TRUE);
    }
    elseif (arg(2) == 'opportunity') {
      drupal_set_message('Successfully added new opportunity.');
      cache_clear_all('opportunity_accounts_listing', 'cache');
      cache_clear_all('count_opportunity_accounts_listing', 'cache');
      cache_clear_all('opportunity_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_opportunity_accounts_listing_producer', 'cache', TRUE);
    }
    elseif (arg(2) == 'deal-in-progress') {
      drupal_set_message('Successfully added new deal in progress.');
      cache_clear_all('deal_in_progress_accounts_listing', 'cache');
      cache_clear_all('count_deals_accounts_listing', 'cache');
      cache_clear_all('deal_in_progress_accounts_listing_producer', 'cache', TRUE);
      cache_clear_all('count_deals_accounts_listing_producer', 'cache', TRUE);
    }
  }
}

/**
 * Form for editing account details.
 */
function edit_account_details_form($form, &$form_state) {

  global $user;

  $company = Bullseye::getCompanyNameByNid(arg(2));
  $people = Bullseye::getAccountPeople(arg(2));
  $primary_contact = '';
  $phone = Bullseye::getPhoneNumberByNid(arg(2));
  $website = Bullseye::getWebsiteByNid(arg(2));
  $address = Bullseye::getStreetAddressByNid(arg(2));
  $city = Bullseye::getCityByNid(arg(2));
  $state = Bullseye::getStateByNid(arg(2));
  $zip_code = Bullseye::getZipCodeByNid(arg(2));
  $business_type = Bullseye::getBusinessTypeByNid(arg(2));
  $tags = Bullseye::getTagsByNid(arg(2));
  $contacts = array();

  // Getting the contacts of the account.
  foreach ($people as $key => $value) {
    $name = $value->field_firstname_value . ' ' . $value->field_lastname_value;
    $contacts[$value->field_contacts_value] = $name . ' - ' . $value->field_email_value;
    if ($value->field_if_primary_contact_value == 'yes') {
      $primary_contact = $value->field_contacts_value;
    }
  }

  $node = node_load(arg(2));

  module_load_include('inc', 'field_collection', 'field_collection.pages');
  module_load_include('inc', 'node', 'node.pages');

  $form = array();
  $form['#parents'] = array();
  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . t('Edit Account Details') . '</h2>',
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company Name'),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Add Company Name'),
    ),
    '#default_value' => $company,
  );

  $form['primary_contact'] = array(
    '#type' => 'select',
    '#title' => t('Primary Contact'),
    '#options' => $contacts,
    '#default_value' => $primary_contact,
  );

  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#attributes' => array(
      'placeholder' => t('Add Phone Number'),
    ),
    '#default_value' => $phone,
  );

  $form['website'] = array(
    '#type' => 'textfield',
    '#title' => t('Website'),
    '#attributes' => array(
      'placeholder' => t('Add Website'),
    ),
    '#default_value' => $website,
  );

  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Corporate Street Address'),
    '#default_value' => $address,
  );

  $form['city'] = array(
    '#type' => 'textfield',
    '#title' => t('City'),
    '#default_value' => $city,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field1 = field_info_field('field_states');
  $instance1 = field_info_instance('node', 'field_states', 'accounts');
  $items1 = field_get_items('node', $node, 'field_states');
  $my_field1 = field_default_form('node', $node, $field1, $instance1, LANGUAGE_NONE, $items1, $form, $form_state);
  $form += (array) $my_field1;

  $form['zip_code'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip Code'),
    '#default_value' => $zip_code,
    '#weight' => 26,
  );

  $form['business_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Type'),
    '#default_value' => $business_type,
    '#weight' => 27,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field = field_info_field('field_tags');
  $instance = field_info_instance('node', 'field_tags', 'accounts');
  $items = field_get_items('node', $node, 'field_tags');
  $my_field = field_default_form('node', $node, $field, $instance, LANGUAGE_NONE, $items, $form, $form_state);
  $form += (array) $my_field;
  $form['field_tags'][LANGUAGE_NONE]['#attributes'] = array(
    'placeholder' => t('+ Enter groups separated by commas ...'),
  );

  $form['submit_container'] = array(
    '#type' => 'container',
    '#weight' => 29,
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit Handler for editing account details.
 */
function edit_account_details_form_submit($form, &$form_state) {

  global $base_url;

  $nid = $form_state['values']['nid'];
  $company = $form_state['values']['company'];
  $primary_contact = $form_state['values']['primary_contact'];
  $phone = $form_state['values']['phone'];
  $website = $form_state['values']['website'];
  $address = $form_state['values']['address'];
  $city = $form_state['values']['city'];
  $field_states = $form_state['values']['field_states'][LANGUAGE_NONE][0]['tid'];
  $zip_code = $form_state['values']['zip_code'];
  $business_type = $form_state['values']['business_type'];
  $tags = $form_state['values']['field_tags'][LANGUAGE_NONE];
  $tids = array();

  $wrapper = entity_metadata_wrapper('node', $nid);
  $wrapper->title->set($company);
  $wrapper->field_work_phone->set($phone);
  $wrapper->field_work_website->set($website);
  $wrapper->field_street->set($address);
  $wrapper->field_city->set($city);
  $wrapper->field_states->set($field_states);
  $wrapper->field_postal_code->set($zip_code);
  $wrapper->field_type_of_business->set($business_type);

  // Saving the tags.
  if (!empty($tags)) {
    foreach ($tags as $key => $value) {
      $tag = trim($value['name']);

      $result = db_query('SELECT t.tid FROM {taxonomy_term_data} t WHERE t.name = :name AND t.vid = 1', array(':name' => $tag));
      $record = $result->fetchAssoc();

      if (!empty($record)) {
        $tids[] = $record['tid'];
      }
      else {
        $term = new stdClass();
        $term->name = $value['name'];
        $term->vid = 1;
        taxonomy_term_save($term);
        $tids[] = $term->tid;
      }

    }
    $wrapper->field_tags->set($tids);
  }
  else {
    $wrapper->field_tags->set(array());
  }

  $status = $wrapper->field_account_status->value();
  $contacts = $wrapper->field_contacts->value();

  $wrapper->save();

  // For saving the primary contact.
  foreach ($contacts as $key => $contact) {
    $collection = field_collection_item_load($contact->item_id);
    $cwrapper = entity_metadata_wrapper('field_collection_item', $collection);
    if ($contact->item_id == $primary_contact) {
      $cwrapper->field_if_primary_contact->set('yes');
    }
    else {
      $cwrapper->field_if_primary_contact->set('no');
    }
    $cwrapper->save();
  }

  cache_clear_all('leads_listing', 'cache');
  cache_clear_all('primary_contact_' . $nid, 'cache');
  cache_clear_all('contacts_' . $nid, 'cache');

  drupal_set_message('Successfully updated account details.');

  $alias = drupal_get_path_alias('node/' . $nid);
  $alias = substr($alias, 8);

  if ($status == '') {
    $status = 'lead';
  }

  // Close the lightbox.
  print '<script>parent.location = "' . $base_url . '/company/' . $alias . '?from=' . $status . '";</script>';
  print '<script>parent.Lightbox.end();</script>';
  die();

}

/**
 * Implements hook_permission().
 */
function bullseye_account_permission() {
  return array(
    'add account' => array(
      'title' => t('Add an Account'),
      'description' => t('Allow user to an account.'),
    ),
  );
}

/**
 * Implements hook_node_update().
 *
 * Clear the cache after update.
 */
function bullseye_account_node_update($node) {
  if ($node->type == 'accounts') {
    $producer_id = NULL;
    if (isset($node->field_visibility[LANGUAGE_NONE]) && is_numeric($node->field_visibility[LANGUAGE_NONE][0]['value'])) {
      $producer_id = $node->field_visibility[LANGUAGE_NONE][0]['value'];
    }

    switch ($node->field_account_status[LANGUAGE_NONE][0]['value']) {
      case 'prospect':
        // Invalidate the existing cache to make sure that
        // the newly added one will get indexed too.
        cache_clear_all('prospect_accounts_listing', 'cache');
        if (!is_null($producer_id)) {
          cache_clear_all('prospect_accounts_listing_producer_' . $producer_id, 'cache');
        }
        break;

      case 'opportunity':
        // Invalidate the existing cache to make sure that
        // the newly added one will get indexed too.
        cache_clear_all('prospect_accounts_listing', 'cache');
        if (!is_null($producer_id)) {
          cache_clear_all('prospect_accounts_listing_producer_' . $producer_id, 'cache');
        }
        break;
    }
  }
}

/**
 * Implements hook_node_insert().
 *
 * Clear the cache after insert.
 */
function bullseye_account_node_insert($node) {
  if ($node->type == 'accounts') {
    $producer_id = NULL;
    if (isset($node->field_visibility[LANGUAGE_NONE]) && is_numeric($node->field_visibility[LANGUAGE_NONE][0]['value'])) {
      $producer_id = $node->field_visibility[LANGUAGE_NONE][0]['value'];
    }

    switch ($node->field_account_status[LANGUAGE_NONE][0]['value']) {
      case 'prospect':
        // Invalidate the existing cache to make sure that
        // the newly added one will get indexed too.
        cache_clear_all('prospect_accounts_listing', 'cache');
        if (!is_null($producer_id)) {
          cache_clear_all('prospect_accounts_listing_producer_' . $producer_id, 'cache');
        }
        break;

      case 'opportunity':
        // Invalidate the existing cache to make sure that
        // the newly added one will get indexed too.
        cache_clear_all('prospect_accounts_listing', 'cache');
        if (!is_null($producer_id)) {
          cache_clear_all('prospect_accounts_listing_producer_' . $producer_id, 'cache');
        }
        break;
    }
  }
}
