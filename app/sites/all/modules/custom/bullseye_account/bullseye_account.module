<?php
/**
 * Bullseye account module.
 */

/**
 * Implements hook_menu().
 */
function bullseye_account_menu() {
  $items = array();

  $items['accounts/new/lead'] = array(
    'title' => t('Add New Lead'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['accounts/new/prospect'] = array(
    'title' => t('Add New Prospect'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_account_new_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['edit/account-details'] = array(
    'title' => t('Edit Account Details'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('edit_account_details_form'),
    'access arguments' => array('add account'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form for adding new accounts.
 */
function bullseye_account_new_form($form, &$form_state) {
  
  global $user;

  $firstname = '';
  $middlename = '';
  $lastname = '';
  $company = '';
  $title = '';
  $contact_type = '';
  $owner = '';
  $business_type = '';
  $work_email = '';
  $work_phone = '';
  $work_website = '';
  $linkedin = '';
  $address = '';
  $visibility = '';
  $tags = '';
  $description = '';

  if (arg(2) == 'lead') {
    $form_title = t('Add New Lead');
  }
  elseif (arg(2) == 'prospect') {
    $form_title = t('Add New Prospect');
  }

  $form = array();

  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . $form_title . '</h2>',
  );

  $form['firstname'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('First Name'),
    ),
    '#default_value' => $firstname,
  );

  $form['middlename'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Middle Name'),
    ),
    '#default_value' => $middlename,
  );

  $form['lastname'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Last Name'),
    ),
    '#default_value' => $lastname,
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Company'),
    '#attributes' => array(
      'placeholder' => t('Add Company'),
    ),
    '#default_value' => $company,
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Title'),
    '#attributes' => array(
      'placeholder' => t('Add Title'),
    ),
    '#default_value' => $title,
  );

  $form['contact_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Contact Type'),
    '#options' => array(
      'potential_prospect' => t('Potential Prospect'),
    ),
    '#default_value' => $contact_type,
  );

  $form['owner'] = array(
    '#type' => 'textfield',
    '#title' => t('Owner'),
    '#default_value' => $owner,
  );

  $form['business_type'] = array(
    '#type' => 'textfield',
    '#title' => t('Business Type'),
    '#default_value' => $business_type,
  );

  $form['work_email'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Email'),
    '#default_value' => $work_email,
    '#attributes' => array(
      'placeholder' => t('Add Email'),
    ),
  );

  $form['work_phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Phone'),
    '#default_value' => $work_phone,
    '#attributes' => array(
      'placeholder' => t('Add Phone'),
    ),
  );

  $form['work_website'] = array(
    '#type' => 'textfield',
    '#title' => t('Work Website'),
    '#default_value' => $work_website,
    '#attributes' => array(
      'placeholder' => t('Add Website'),
    ),
  );

  $form['linkedin'] = array(
    '#type' => 'textfield',
    '#title' => t('LinkedIn'),
    '#default_value' => $linkedin,
    '#attributes' => array(
      'placeholder' => t('Add Social'),
    ),
  );

  $form['address'] = array(
    '#type' => 'textfield',
    '#title' => t('Address'),
    '#default_value' => $address,
    '#attributes' => array(
      'placeholder' => t('Add Address'),
    ),
  );

  $form['visibility'] = array(
    '#type' => 'textfield',
    '#title' => t('Visibility'),
    '#default_value' => $visibility,
  );

  $form['tags'] = array(
    '#type' => 'textfield',
    '#title' => t('Tags'),
    '#default_value' => $tags,
    '#attributes' => array(
      'placeholder' => t('Add Tags'),
    ),
  );

  $form['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
    '#default_value' => $description,
    '#attributes' => array(
      'placeholder' => t('Add Description'),
    ),
  );

  $form['submit_container'] = array(
    '#type' => 'container',
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Form for editing account details.
 */
function edit_account_details_form($form, &$form_state) {
  
  global $user;

  $company = Bullseye::getCompanyNameByNid(arg(2));
  $people = Bullseye::getAccountPeople(arg(2));
  $primary_contact = '';
  $phone = Bullseye::getPhoneNumberByNid(arg(2));
  $website = Bullseye::getWebsiteByNid(arg(2));
  $address = Bullseye::getStreetAddressByNid(arg(2));
  $city = Bullseye::getCityByNid(arg(2));
  $state = Bullseye::getStateByNid(arg(2));
  $zip_code = Bullseye::getZipCodeByNid(arg(2));
  $business_type = Bullseye::getBusinessTypeByNid(arg(2));
  $tags = Bullseye::getTagsByNid(arg(2));
  $contacts = array();

  // Getting the contacts of the account.
  foreach ($people as $key => $value) {
    $name = $value->field_firstname_value . ' ' . $value->field_lastname_value;
    $contacts[$value->field_contacts_value] = $name . ' - ' . $value->field_email_value;
    if ($value->field_if_primary_contact_value == 'yes') {
      $primary_contact = $value->field_contacts_value;
    }
  }

  $node = node_load(arg(2));

  module_load_include('inc', 'field_collection', 'field_collection.pages');
  module_load_include('inc', 'node', 'node.pages');

  $form = array();
  $form['#parents'] = array();
  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  $form['nid'] = array(
    '#type' => 'hidden',
    '#value' => $node->nid,
  );

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . t('Edit Account Details') . '</h2>',
  );

  $form['company'] = array(
    '#type' => 'textfield',
    '#title' => t('Company Name'),
    '#required' => TRUE,
    '#attributes' => array(
      'placeholder' => t('Add Company Name'),
    ),
    '#default_value' => $company,
  );

  $form['primary_contact'] = array(
    '#type' => 'select',
    '#title' => t('Primary Contact'),
    '#options' => $contacts,
    '#default_value' => $primary_contact,
  );

  $form['phone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone Number'),
    '#attributes' => array(
      'placeholder' => t('Add Phone Number'),
    ),
    '#default_value' => $phone,
  );

  $form['website'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Website'),
    '#attributes' => array(
      'placeholder' => t('Add Website'),
    ),
    '#default_value' => $website,
  );

  $form['address'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Corporate Street Address'),
    '#default_value' => $address,
  );

  $form['city'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('City'),
    '#default_value' => $city,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field1 = field_info_field('field_states');
  $instance1 = field_info_instance('node', 'field_states', 'accounts');
  $items1 = field_get_items('node', $node, 'field_states');
  $my_field1 = field_default_form('node', $node, $field1, $instance1, LANGUAGE_NONE, $items1, $form, $form_state);
  $form += (array) $my_field1;

  $form['zip_code'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Zip Code'),
    '#default_value' => $zip_code,
    '#weight' => 26,
  );

  $form['business_type'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Business Type'),
    '#default_value' => $business_type,
    '#weight' => 27,
  );

  // Getting the field "Tags" from accounts content type fields.
  $field = field_info_field('field_tags');
  $instance = field_info_instance('node', 'field_tags', 'accounts');
  $items = field_get_items('node', $node, 'field_tags');
  $my_field = field_default_form('node', $node, $field, $instance, LANGUAGE_NONE, $items, $form, $form_state);
  $form += (array) $my_field;
  $form['field_tags'][LANGUAGE_NONE]['#attributes'] = array(
    'placeholder' => t('+ Enter groups separated by commas ...'),
  );

  $form['submit_container'] = array(
    '#type' => 'container',
    '#weight' => 29,
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Save'),
  );

  return $form;
}

/**
 * Submit Handler for editing account details.
 */
function edit_account_details_form_submit($form, &$form_state) {

  global $base_url;

  $nid = $form_state['values']['nid'];
  $company = $form_state['values']['company'];
  $primary_contact = $form_state['values']['primary_contact'];
  $phone = $form_state['values']['phone'];
  $website = $form_state['values']['website'];
  $address = $form_state['values']['address'];
  $city = $form_state['values']['city'];
  $field_states = $form_state['values']['field_states'][LANGUAGE_NONE][0]['tid'];
  $zip_code = $form_state['values']['zip_code'];
  $business_type = $form_state['values']['business_type'];
  $tags = $form_state['values']['field_tags'][LANGUAGE_NONE];
  $tids = array();

  $wrapper = entity_metadata_wrapper('node', $nid);
  $wrapper->title->set($company);
  $wrapper->field_company->set($company);
  $wrapper->field_work_phone->set($phone);
  $wrapper->field_work_website->set($website);
  $wrapper->field_street->set($address);
  $wrapper->field_city->set($city);
  $wrapper->field_states->set($field_states);
  $wrapper->field_postal_code->set($zip_code);
  $wrapper->field_type_of_business->set($business_type);

  // Saving the tags.
  if (!empty($tags)) {
    foreach ($tags as $key => $value) {
      $tag = trim($value['name']);

      $result = db_query('SELECT t.tid FROM {taxonomy_term_data} t WHERE t.name = :name AND t.vid = 1', array(':name' => $tag));
      $record = $result->fetchAssoc();

      if (!empty($record)) {
        $tids[] = $record['tid'];
      }
      else {
        $term = new stdClass();
        $term->name = $value['name'];
        $term->vid = 1;
        taxonomy_term_save($term);
        $tids[] = $term->tid;
      }

    }
    $wrapper->field_tags->set($tids);
  }
  else {
    $wrapper->field_tags->set(array());
  }

  $status = $wrapper->field_account_status->value();
  $contacts = $wrapper->field_contacts->value();

  $wrapper->save();

  // For saving the primary contact.
  foreach ($contacts as $key => $contact) {
    $collection = field_collection_item_load($contact->item_id);
    $cwrapper = entity_metadata_wrapper('field_collection_item', $collection);
    if ($contact->item_id == $primary_contact) {
      $cwrapper->field_if_primary_contact->set('yes');
    }
    else {
      $cwrapper->field_if_primary_contact->set('no');
    }
    $cwrapper->save();
  }

  cache_clear_all('primary_contact_' . $nid, 'cache');
  cache_clear_all('contacts_' . $nid, 'cache');

  drupal_set_message('Successfully updated account details.');

  $alias = drupal_get_path_alias('node/' . $nid);
  $alias = substr($alias, 8);

  // Close the lightbox.
  print '<script>parent.location = "' . $base_url . '/company/' . $alias . '?from=' . $status . '";</script>';
  print '<script>parent.Lightbox.end();</script>';
  die();
  
}

/**
 * Implements hook_permission().
 */
function bullseye_account_permission() {
  return array(
    'add account' => array(
      'title' => t('Add an Account'),
      'description' => t('Allow user to an account.'),
    ),
  );
}

/**
 * Implements hook_node_update().
 *
 * Clear the cache after updat
 */
function bullseye_account_node_update($node) {
  if ($node->type == 'account' && $node->field_account_status[LANGUAGE_NONE][0]['value'] == 'prospect') {
    // Update the node.
    node_save($node);
    // Invalidate the existing cache to make sure that
    // the newly added one will get indexed too.
    cache_clear_all('prospect_accounts_listing', 'cache');
  }
}

/**
 * Implements hook_node_insert().
 */
function bullseye_account_node_insert($node) {
  if ($node->type == 'account' && $node->field_account_status[LANGUAGE_NONE][0]['value'] == 'prospect') {
    // Update the node.
    node_save($node);
    // Invalidate the existing cache to make sure that
    // the newly added one will get indexed too.
    cache_clear_all('prospect_accounts_listing', 'cache');
  }
}
