<?php
/**
 * Bullseye Leads module file.
 */

/**
 * Implements hook_menu().
 */
function bullseye_leads_menu() {
  $items = array();

  $items['admin/content/leads/import'] = array(
    'title' => 'Import Leads',
    'description' => 'Import leads from CSV file.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_leads_import_leads'),
    'access arguments' => array('import leads'),
    'file' => 'import.inc.php',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bullseye_leads_permission() {
  return array(
    'import leads' => array(
      'title' => t('Import Leads'),
      'description' => t('Allow the role/s to import leads via CSV.'),
    ),
  );
}

/**
 * A helper function to import employee.
 *
 * @param array $rows
 *   The data from the csv file.
 *
 * @param array $company
 *   The company entity id.
 */
function bullseye_leads_import($rows) {
  global $user;

  $rows = array_reverse($rows);

  foreach ($rows as $row) {
    try {

      // Initialize the class.
      $be = new Bullseye;

      // Only create if the leads doesn't exist.
      if (!$be->accountExist(trim($row[22]))) {

        $node = new stdClass();

        $node->title = trim($row[1]) . ' ' . trim($row[2]) . ' ' . trim($row[3]);
        $node->type = "accounts";
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->status = 1;
        $node->promote = 0;
        $node->comment = 0;

        // Set the type field.
        $node->accounts[$node->language][0]['value'] = trim($row[0]);

        // Set the firstname.
        $node->field_firstname[$node->language][0]['value'] = trim($row[1]);

        // Set the middlename.
        $node->field_middle_name[$node->language][0]['value'] = trim($row[2]);

        // Set the lastname.
        $node->field_lastname[$node->language][0]['value'] = trim($row[3]);

        // Set the prefix.
        $node->field_prefix[$node->language][0]['value'] = trim($row[4]);

        // Set the suffix.
        $node->field_suffix[$node->language][0]['value'] = trim($row[5]);

        // Set the title.
        $node->field_title[$node->language][0]['value'] = trim($row[6]);

        // Set the details.
        $node->field_details[$node->language][0]['value'] = trim($row[7]);
        $node->field_details[$node->language][0]['#format'] = 'filtered_html';

        // Set the value.
        $node->field_value[$node->language][0]['value'] = trim($row[8]);

        // Set the mandate category.
        $node->field_mandate_category[$node->language][0]['value'] = trim($row[9]);

        // Set the company.
        $node->field_company[$node->language][0]['value'] = trim($row[10]);

        // Set the business type.
        $node->field_type_of_business[$node->language][0]['value'] = trim($row[11]);

        // Set the owned by.
        $node->field_owned_by[$node->language][0]['value'] = trim($row[12]);

        // Set the source.
        $node->field_source[$node->language][0]['value'] = trim($row[13]);

        // Set the street.
        $node->field_street[$node->language][0]['value'] = trim($row[14]);

        // Set the city.
        $node->field_city[$node->language][0]['value'] = trim($row[15]);

        // Set the states term reference.
        $tid = $be->getTermId('states', trim($row[17]));
        $node->field_states[$node->language][0]['tid'] = (int) $tid;

        // Set the state code.
        $node->field_state_code[$node->language][0]['value'] = trim($row[17]);

        // Set the state name.
        $node->field_state[$node->language][0]['value'] = trim($row[18]);

        // Set the postal code.
        $node->field_postal_code[$node->language][0]['value'] = trim($row[19]);

        // Set the work phone.
        $node->field_work_phone[$node->language][0]['value'] = trim($row[20]);

        // Set the mobile phone.
        $node->field_mobile_phone[$node->language][0]['value'] = trim($row[21]);

        // Set the email.
        $node->field_email[$node->language][0]['value'] = trim($row[22]);

        // Set the work website.
        $node->field_work_website[$node->language][0]['value'] = trim($row[23]);

        // Set the personal website.
        $node->field_personal_website[$node->language][0]['value'] = trim($row[24]);

        // Set the linkedin personal.
        $node->field_linkedin_personal[$node->language][0]['value'] = trim($row[25]);

        // Set the facebook personal.
        $node->field_facebook_personal[$node->language][0]['value'] = trim($row[26]);

        // Set the tags.
        $tags = explode(' ', trim($row[27]));
        foreach ($tags as $tag) {
          $tid = $be->getTermId('tags', $tag);
          if ($tid) {
            $node->field_tags[$node->language][]['tid'] = $tid;
          }
          else {
            // Create the term if it doesn't exist.
            $term = new stdClass();
            $term->name = $tag;
            $term->vid = 1;
            taxonomy_term_save($term);

            $tid = $be->getTermId('tags', $tag);
            $node->field_tags[$node->language][]['tid'] = $tid;
          }
        }

        // Set the producers.
        $node->field_producers[$node->language][0]['value'] = trim($row[28]);

        // Set the referral partners.
        $node->field_referral_partners[$node->language][0]['value'] = trim($row[29]);

        // Set the account status.
        $account_status = trim($row[30]);
        $account_status = strtolower($account_status);
        $node->field_account_status[$node->language][0]['value'] = $account_status;

        // Set the workflow status and action status.
        if ($account_status == 'lead') {
          $node->field_workflow_status[$node->language][0]['value'] = 'verification';
          $node->field_action_status[$node->language][0]['value'] = 'verify_sca_dbra';
        }
        else {
          $node->field_workflow_status[$node->language][0]['value'] = 'engagement';
          $node->field_action_status[$node->language][0]['value'] = 'send_email';
        }

        $node = node_submit($node);
        node_save($node);
      }
      else {
        drupal_set_message(t('Account is already in our system.'));
      }
    }
    catch (Exception $e) {
      drupal_set_message(t('Error processing row.') . ' Error is: ' . $e);
    }
  }
}
