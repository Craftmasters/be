<?php
/**
 * Bullseye Leads module file.
 */

/**
 * Implements hook_menu().
 */
function bullseye_leads_menu() {
  $items = array();

  $items['admin/content/leads/import'] = array(
    'title' => 'Import Leads',
    'description' => 'Import leads from CSV file.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_leads_import_leads'),
    'access arguments' => array('import leads'),
    'file' => 'import.inc.php',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bullseye_leads_permission() {
  return array(
    'import leads' => array(
      'title' => t('Import Leads'),
      'description' => t('Allow the role/s to import leads via CSV.'),
    ),
  );
}

/**
 * A helper function to import employee.
 *
 * @param array $rows
 *   The data from the csv file.
 *
 * @param array $company
 *   The company entity id.
 */
function bullseye_leads_import($rows) {
  global $user;

  $rows = array_reverse($rows);

  foreach ($rows as $row) {
    try {

      // Initialize the class.
      $be = new Bullseye($user);

      // Only create if the account doesn't exist.
      if (!Bullseye::accountExist(trim($row[22]))) {

        $node = new stdClass();

        $prefix = ucfirst(trim($row[4]));
        $first = ucfirst(trim($row[1]));
        $middle = ucfirst(trim($row[2]));
        $last = ucfirst(trim($row[3]));
        $suffix = ucfirst(trim($row[5]));

        //$node->title = $prefix . ' ' . $first . ' ' . $middle . ' ' . $last . ' ' . $suffix;
        $node->title = trim($row[10]);
        $node->type = "accounts";
        node_object_prepare($node);
        $node->language = LANGUAGE_NONE;
        $node->uid = $user->uid;
        $node->status = 1;
        $node->promote = 0;
        $node->comment = 0;

        // Set the type field.
        //$account_type = trim($row[0]);
        //$account_type = strtolower($account_type);
        //$node->field_type[$node->language][0]['value'] = $account_type;

        // Set the firstname.
        // $node->field_firstname[$node->language][0]['value'] = trim($row[1]);

        // Set the middlename.
        // $node->field_middle_name[$node->language][0]['value'] = ucfirst(trim($row[2]));

        // Set the lastname.
        //$node->field_lastname[$node->language][0]['value'] = trim($row[3]);

        // Set the prefix.
        // $node->field_prefix[$node->language][0]['value'] = trim($row[4]);

        // Set the suffix.
        // $node->field_suffix[$node->language][0]['value'] = trim($row[5]);

        // Set the title.
        // $node->field_title[$node->language][0]['value'] = trim($row[6]);

        // Set the details.
        // $node->field_details[$node->language][0]['value'] = trim($row[7]);
        // $node->field_details[$node->language][0]['#format'] = 'filtered_html';

        // Set the value.
        // $node->field_value[$node->language][0]['value'] = trim($row[8]);

        // Set the mandate category.
        // $node->field_mandate_category[$node->language][0]['value'] = strtolower(trim($row[9]));

        // Set the company.
        // $node->field_company[$node->language][0]['value'] = trim($row[10]);

        // Set the business type.
        // $node->field_type_of_business[$node->language][0]['value'] = trim($row[11]);

        // Set the owned by.
        // $node->field_owned_by[$node->language][0]['value'] = trim($row[12]);

        // Set the source.
        // $node->field_source[$node->language][0]['value'] = trim($row[13]);

        // Set the street.
        // $node->field_street[$node->language][0]['value'] = trim($row[14]);

        // Set the city.
        // $node->field_city[$node->language][0]['value'] = trim($row[15]);

        // Set the states term reference.
        // $tid = $be->getTermId('states', trim($row[17]));
        // $node->field_states[$node->language][0]['tid'] = (int) $tid;

        // Set the state code.
        // $node->field_state_code[$node->language][0]['value'] = trim($row[17]);

        // Set the state name.
        // $node->field_state[$node->language][0]['value'] = trim($row[18]);

        // Set the postal code.
        // $node->field_postal_code[$node->language][0]['value'] = trim($row[19]);

        // Set the work phone.
        // $node->field_work_phone[$node->language][0]['value'] = trim($row[20]);

        // Set the mobile phone.
        //$node->field_mobile_phone[$node->language][0]['value'] = trim($row[21]);

        // Set the email.
        // $node->field_email[$node->language][0]['value'] = trim($row[22]);

        // Set the work website.
        // $node->field_work_website[$node->language][0]['value'] = trim($row[23]);

        // Set the personal website.
        //$node->field_personal_website[$node->language][0]['value'] = trim($row[24]);

        // Set the linkedin personal.
        //$node->field_linkedin_personal[$node->language][0]['value'] = trim($row[25]);

        // Set the facebook personal.
        //$node->field_facebook_personal[$node->language][0]['value'] = trim($row[26]);

        // Set the tags.
        /*if (strlen(trim($row[27])) >=2) {
          $tags = explode(' ', trim($row[27]));
          foreach ($tags as $tag) {
            $tid = $be->getTermId('tags', $tag);
            if ($tid) {
              $node->field_tags[$node->language][]['tid'] = (int) $tid;
            }
            else {
              // Create the term if it doesn't exist.
              $term = new stdClass();
              $term->name = $tag;
              $term->vid = 1;
              taxonomy_term_save($term);

              $tid = Bullseye::getTermId('tags', $tag);
              $node->field_tags[$node->language][]['tid'] = (int) $tid;
            }
          }
        }*/

        // Set the producers.
        // $node->field_producers[$node->language][0]['value'] = trim($row[28]);

        // Set the referral partners.
        // $node->field_referral_partners[$node->language][0]['value'] = trim($row[29]);

        // Set the account status.
        // $account_status = trim($row[30]);
        // $account_status = strtolower($account_status);
        // $node->field_account_status[$node->language][0]['value'] = $account_status;

        // Set the workflow status and action status.
        /*if ($account_status == 'lead') {
          $node->field_workflow_status[$node->language][0]['value'] = 'verification';
          $node->field_action_status[$node->language][0]['value'] = 'verify_sca_dbra';
        }
        else {
          $node->field_workflow_status[$node->language][0]['value'] = 'engagement';
          //$node->field_action_status[$node->language][0]['value'] = 'send_email';

          // Commented out setting prospects action status 'send_email'
          // due to as per mariel mailchimp not yet available so
          // imported prospects statuses are directly 'build_rapport' by default temporarily.
          $node->field_action_status[$node->language][0]['value'] = 'build_rapport';
        }*/

        $node = node_submit($node);
        node_save($node);

        // Notify the user once the import is done.
        drupal_set_message(t('Import successfully completed.'), 'message');
      }
      else {
        drupal_set_message(t('Account is already in our system.'), 'warning');
      }
    }
    catch (Exception $e) {
      drupal_set_message(t('Error processing row.') . ' Error is: ' . $e);
    }
  }
}

/**
 * Import accounts from a csv.
 *
 * @param array $data
 *   The data from the CSV.
 *
 * @param string $type
 *   Either leads or prospect.
 */
function _import_account($data, $type) {
  global $user;

  $data = array_reverse($data);

  foreach ($data as $row) {
    // Only create if the account doesn't exist.
    if (!Bullseye::accountExist(trim($row[10]))) {
      $node = entity_create('node', array('type' => 'accounts'));
      $node->uid = $user->uid;
      $node->status = 1;
      $node->promote = 0;
      $node->comment = 0;
      $node->language = LANGUAGE_NONE;

      // Create a 'Entity Wrapper' of that new entity.
      $entity = entity_metadata_wrapper('node', $node);
      $entity->title->set(trim($row[10]));

      // Set the type field.
      $account_type = trim($row[0]);
      $account_type = strtolower($account_type);
      $entity->field_type->set($account_type);

      // Set the owned by.
      $entity->field_owned_by->set(trim($row[12]));

      // Set the business type.
      $entity->field_type_of_business->set(trim($row[11]));

      // Set the work phone.
      $entity->field_work_phone->set(trim($row[19]));

      // Set the tags.
      if (strlen(trim($row[26])) >=2) {
        $tags = explode(',', trim($row[26]));
        $curr_list = $entity->field_tags->value();
        foreach ($tags as $tag) {
          $tid = Bullseye::getTermId('tags', trim($tag));
          if ($tid) {
            $curr_list[] = (int) $tid;
          }
          else {
            // Create the term if it doesn't exist.
            $term = new stdClass();
            $term->name = $tag;
            $term->vid = 1;
            taxonomy_term_save($term);

            $tid = Bullseye::getTermId('tags', trim($tag));
            $curr_list[] = (int) $tid;
          }
        }
        $entity->field_tags->set($curr_list);
      }

      // Set the value.
      $value = (float) trim($row[8]);
      if (is_float($value)) {
        $entity->field_value->set($value);
      }

      // Set the mandate category.
      $entity->field_mandate_category->set(strtolower(trim($row[9])));

      // Set the source.
      $entity->field_source->set(trim($row[13]));

      // Set the street.
      $entity->field_street->set(trim($row[14]));

      // Set the city.
      $entity->field_city->set(trim($row[15]));

      // Set the states term reference.
      $tid = Bullseye::getTermId('states', trim($row[17]));
      $tid = (int) $tid;
      $entity->field_states->set($tid);

      // Set the state code.
      $entity->field_state_code->set(trim($row[17]));

      // Set the postal code.
      $entity->field_postal_code->set(trim($row[18]));

      // Set the work website.
      $entity->field_work_website->set(trim($row[22]));

      // Set the producers.
      $entity->field_producers->set(trim($row[27]));

      // Set the referral partners.
      $entity->field_referral_partners->set(trim($row[28]));

      // Set the account status.
      $account_status = trim($row[29]);
      $account_status = strtolower($account_status);
      $entity->field_account_status->set($account_status);

      // Set the workflow status and action status.
      if ($account_status == 'lead') {
        $entity->field_workflow_status->set('verification');
        $entity->field_action_status->set('verify_sca_dbra');
      }
      else {
        $entity->field_workflow_status->set('engagement');
        //$entity->field_action_status->set('send_email');

        // Commented out setting prospects action status 'send_email'
        // due to as per mariel mailchimp not yet available so
        // imported prospects statuses are directly 'build_rapport' by default temporarily.
        $entity->field_action_status->set('build_rapport');
      }

      // Contact field collection.
      $contact = entity_create('field_collection_item', array('field_name' => 'field_contacts'));
      $contact->setHostEntity('node', $node);

      // Now define the contact parameters.
      $cwrapper = entity_metadata_wrapper('field_collection_item', $contact);
      $cwrapper->field_firstname->set(trim($row[1]));
      $cwrapper->field_middle_name->set(ucfirst(trim($row[2])));
      $cwrapper->field_lastname->set(trim($row[3]));
      $cwrapper->field_prefix->set(trim($row[4]));
      $cwrapper->field_suffix->set(trim($row[5]));
      $cwrapper->field_position->set(trim($row[6]));
      // Set the details.
      $cwrapper->field_details->set(trim($row[7]));
      $cwrapper->field_mobile_phone->set(trim($row[20]));
      $cwrapper->field_email->set(trim($row[21]));
      $cwrapper->field_personal_website->set(trim($row[23]));
      $cwrapper->field_facebook_personal->set(trim($row[25]));
      $cwrapper->field_linkedin_personal->set(trim($row[24]));

      // Save field collection.
      $cwrapper->save();

      // Save the entity.
      $entity->save();
    }
    else {
      // Check contact if it is different then update/add if yes.
      $nid = Bullseye::accountExist(trim($row[10]));
      $node = node_load($nid);
      $entity = entity_metadata_wrapper('node', $node);

      // Contact field collection.
      $contact = entity_create('field_collection_item', array('field_name' => 'field_contacts'));
      $contact->setHostEntity('node', $node);

      // Update the field collections.
      // Now define the contact parameters.
      $cwrapper = entity_metadata_wrapper('field_collection_item', $contact);
      $cwrapper->field_firstname->set(trim($row[1]));
      $cwrapper->field_middle_name->set(ucfirst(trim($row[2])));
      $cwrapper->field_lastname->set(trim($row[3]));
      $cwrapper->field_prefix->set(trim($row[4]));
      $cwrapper->field_suffix->set(trim($row[5]));
      $cwrapper->field_position->set(trim($row[6]));
      // Set the details.
      $cwrapper->field_details->set(trim($row[7]));
      $cwrapper->field_mobile_phone->set(trim($row[20]));
      $cwrapper->field_email->set(trim($row[21]));
      $cwrapper->field_personal_website->set(trim($row[23]));
      $cwrapper->field_facebook_personal->set(trim($row[25]));
      $cwrapper->field_linkedin_personal->set(trim($row[24]));

      // Save field collection.
      $cwrapper->save();

      // Save the entity.
      $entity->save();
    }
  }
  // Clear the cache.
  cache_clear_all('accounts_listing', 'cache');
  cache_clear_all('leads_accounts_listing', 'cache');
  cache_clear_all('count_accounts_listing', 'cache');
  cache_clear_all('count_leads_accounts_listing', 'cache');

  // Notify the user once the import is done.
  drupal_set_message(t('Import successfully completed.'), 'status');
}
