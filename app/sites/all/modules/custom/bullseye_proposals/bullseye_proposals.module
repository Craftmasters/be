<?php
/**
 * Bullseye proposals module.
 */

/**
 * Implements hook_menu().
 */
function bullseye_proposals_menu() {
  $items = array();

  $items['proposals/add'] = array(
    'title' => 'Send New Proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_proposals_form'),
    'access arguments' => array('add proposal'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['proposals/edit'] = array(
    'title' => 'Edit Proposal Details',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_proposals_form'),
    'access arguments' => array('add proposal'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['proposals/send-email'] = array(
    'title' => 'Send Proposal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bullseye_proposals_email_form'),
    'access arguments' => array('add proposal'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bullseye_proposals_permission() {
  return array(
    'add proposal' => array(
      'title' => t('Add Proposal'),
      'description' => t('Allow user to add new proposals.'),
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Add proposal form.
 */
function bullseye_proposals_form($form, &$form_state) {
  $form = array(); 

  $form['#parents'] = array();

  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  $account = '';
  $priority = '';
  $due_date = '';
  $proposal_attachment = '';
  $benefits = array();
  $major_medical = 0;
  $limited_medical = 0;
  $teledoc = 0;
  $mec = 0;
  $life = 0;
  $short_term_disability = 0;
  $dental = 0;
  $vision = 0;
  $retirement = 0;
  $special_benefits = 0;
  $special_benefits_text = '';

  $form_title = t('Send New Proposal');
  if (arg(1) == 'edit') {
    $form_title = t('Edit Proposal Details');
    $proposal = Bullseye::getProposalDetailsByNid(arg(2));
    $account = $proposal->field_account[LANGUAGE_NONE][0]['nid'];
    $priority = $proposal->field_priority[LANGUAGE_NONE][0]['value'];
    $due_date = $proposal->field_due_date[LANGUAGE_NONE][0]['value'];
    $special_benefits_text = $proposal->field_special_benefits[LANGUAGE_NONE][0]['value'];
    $benefits = $proposal->field_benefits_value;
    if (isset($proposal->field_attached_proposal[LANGUAGE_NONE][0]['fid'])) {
      $proposal_attachment = $proposal->field_attached_proposal[LANGUAGE_NONE][0]['fid'];
    }
    if (in_array('major_medical', $benefits)) {
      $major_medical = 1;
    }
    if (in_array('limited_medical', $benefits)) {
      $limited_medical = 1;
    }
    if (in_array('teledoc', $benefits)) {
      $teledoc = 1;
    }
    if (in_array('mec', $benefits)) {
      $mec = 1;
    }
    if (in_array('life', $benefits)) {
      $life = 1;
    }
    if (in_array('short_term_disability', $benefits)) {
      $short_term_disability = 1;
    }
    if (in_array('dental', $benefits)) {
      $dental = 1;
    }
    if (in_array('vision', $benefits)) {
      $vision = 1;
    }
    if (in_array('retirement', $benefits)) {
      $retirement = 1;
    }
    if (in_array('special_benefits', $benefits)) {
      $special_benefits = 1;
    }
  }

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . $form_title . '</h2>',
  );

  if (arg(1) == 'edit') {
    $form['company_name'] = array(
      '#type' => 'textfield',
      '#required' => TRUE,
      '#title' => t('Account'),
      '#default_value' => Bullseye::getCompanyNameByNid($account),
      '#attributes' => array(
        'readonly' => 'readonly',
      ),
    );
    $form['nid'] = array(
      '#type' => 'hidden',
      '#default_value' => $account,
    );
  }
  else {
    $form['account'] = array(
      '#required' => TRUE,
      '#type' => 'entityreference',
      '#title' => t('Select Account'),
      '#era_entity_type' => 'node',
      '#era_bundles' => array('accounts'),
      '#era_cardinality' => 1,
      '#era_query_settings' => array(
        'limit' => 15, // Default is 50.
        'property_conditions' => array(
          array('status', 1, '='),
        ),
        'field_conditions' => array(),
      ),
    );
  }

  // The values for the dropdown box.
  $form['type_options'] = array(
    '#type' => 'value',
    '#value' => array(
      'high' => t('High'),
      'normal' => t('Normal'),
      'low' => t('Low'),
    ),
  );

  $form['priority'] = array(
    '#title' => t('Priority'),
    '#type' => 'select',
    '#description' => "Select the priority level.",
    '#options' => $form['type_options']['#value'],
    '#default_value' => $priority,
  );

  $form['due_date'] = array(
    '#type' => 'date_popup',
    '#date_format' => 'm/d/Y',
    '#default_value' => $due_date,
    '#date_year_range' => '0:+3',
    '#required' => true,
    '#title' => t('Due Date'),
  );

  $form['benefits_container'] = array(
    '#type' => 'container',
    'benefits' => array(),
  );

  $form['benefits_container']['benefits']['major_medical'] = array(
    '#type' => 'checkbox',
    '#title' => t('Major Medical'),
    '#default_value' => $major_medical,
  );

  $form['benefits_container']['benefits']['limited_medical'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limited Medical'),
    '#default_value' => $limited_medical,
  );

  $form['benefits_container']['benefits']['teledoc'] = array(
    '#type' => 'checkbox',
    '#title' => t('Telemedicine'),
    '#default_value' => $teledoc,
  );

  $form['benefits_container']['benefits']['mec'] = array(
    '#type' => 'checkbox',
    '#title' => t('MEC'),
    '#default_value' => $mec,
  );

  $form['benefits_container']['benefits']['life'] = array(
    '#type' => 'checkbox',
    '#title' => t('Life & AD&D'),
    '#default_value' => $life,
  );

  $form['benefits_container']['benefits']['short_term_disability'] = array(
    '#type' => 'checkbox',
    '#title' => t('Short Term Disability'),
    '#default_value' => $short_term_disability,
  );

  $form['benefits_container']['benefits']['dental'] = array(
    '#type' => 'checkbox',
    '#title' => t('Dental'),
    '#default_value' => $dental,
  );

  $form['benefits_container']['benefits']['vision'] = array(
    '#type' => 'checkbox',
    '#title' => t('Vision'),
    '#default_value' => $vision,
  );

  $form['benefits_container']['benefits']['retirement'] = array(
    '#type' => 'checkbox',
    '#title' => t('Retirement'),
    '#default_value' => $retirement,
  );

  $form['benefits_container']['benefits']['special_benefits'] = array(
    '#type' => 'checkbox',
    '#title' => t('Special Benefits'),
    '#default_value' => $special_benefits,
  );

  $form['special_benefits_text'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Enter special benefit'),
    ),
    '#default_value' => $special_benefits_text,
  );

  $form['attach_proposal'] = array(
    '#title' => t('Attach Proposal'),
    '#type' => 'managed_file',
    '#default_value' => $proposal_attachment,
  );

  $form['submit_container'] = array(
    '#type' => 'container',
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Next'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * Submit handler for add proposal form.
 */
function bullseye_proposals_form_submit($form, &$form_state) {
  global $user;

  // Get the account data.
  $due_date = strtotime($form_state['values']['due_date']);
  $priority = $form_state['values']['priority'];
  $proposal_status = 'sent';
  $attached_proposal = NULL;
  $benefits = array();
  $special_benefits_text = $form_state['values']['special_benefits_text'];

  foreach ($form_state['complete form']['benefits_container']['benefits'] as $key => $value) {
    if (isset($value['#value']) && $value['#value'] == 1) {
      $benefits[] = $key;
    }
  }

  // Attched proposal.
  if ($form_state['values']['attach_proposal'] != 0) {
    $attached_proposal = file_load($form_state['values']['attach_proposal']);
    $attached_proposal->display = 1;
    $attached_proposal = file_copy($attached_proposal, 'public://');
    $attached_proposal = (array) $attached_proposal;
  }

  // Make sure the the session is clear before we proceed.
  unset($_SESSION['proposal_recipient']);

  if (arg(1) == 'edit') {

    $account = node_load($form_state['values']['nid']);
    $account_nid = $form_state['values']['nid'];
    $proposal_title = $account->title;
    $fcid = $account->field_contacts[LANGUAGE_NONE][0]['value'];
    $contact = field_collection_item_load($fcid);
    $to = $contact->field_email[LANGUAGE_NONE][0]['value'];

    $nid = arg(2);

    $wrapper = entity_metadata_wrapper('node', $nid);
    $wrapper->title->set($proposal_title);
    $wrapper->field_account->set($account_nid);
    $wrapper->field_due_date->set($due_date);
    $wrapper->field_priority->set($priority);
    $wrapper->field_benefits->set($benefits);
    $wrapper->field_special_benefits->set($special_benefits_text);
    $wrapper->field_others->set($special_benefits_text);
    $wrapper->field_proposal_status->set($proposal_status);
    $wrapper->field_attached_proposal->set($attached_proposal);

    $wrapper->save();

    // Clear listing page items.
    cache_clear_all('proposals_listing_sent', 'cache');
    cache_clear_all('proposal_details_' . $nid, 'cache');

  }
  else {

    $be = new Bullseye($user);
    $data = $form_state['values'];
    $data['complete form'] = $form_state['complete form'];

    // Build the data for email.
    $account = node_load($data['account']['entity_id']);
    $proposal_title = $account->title;
    $fcid = $account->field_contacts[LANGUAGE_NONE][0]['value'];
    $contact = field_collection_item_load($fcid);
    $to = $contact->field_email[LANGUAGE_NONE][0]['value'];

    // Save the proposal to Proposal entity storage and get the nid.
    $nid = $be->createProposal($data);
    
  }

  // Load the proposal entity.
  $node = node_load($nid);
  $lang = $node->language;

  $path = '';
  // Get the attachements.
  if (isset($node->field_attached_proposal[$lang][0])) {
    if ($wrapper = file_stream_wrapper_get_instance_by_uri($node->field_attached_proposal[$lang][0]['uri'])) {
      $path = $wrapper->realpath();
    }
  }

  // Save the data temporarily to session variable.
  $_SESSION['proposal_recipient'] = array(
    'company' => $proposal_title,
    'company_id' => $account->nid,
    'attachments' => array(
      array(
        'filename' => $node->field_attached_proposal[$lang][0]['filename'],
        'uri' => $node->field_attached_proposal[$lang][0]['uri'],
        'fid' => $node->field_attached_proposal[$lang][0]['fid'],
      ),
    ),
    'to' => $to,
  );

  // Navigate to proposal email form.
  drupal_goto('proposals/send-email');

}

/**
 * Implements hook_form().
 *
 * Send proposal form (email).
 */
function bullseye_proposals_email_form($form, &$form_state) {
  $form = array();

  // Company name.
  $company_name = $_SESSION['proposal_recipient']['company'];

  $attachment_filename = $_SESSION['proposal_recipient']['attachments'][0]['filename'];
  $attachment_download_path = $_SESSION['proposal_recipient']['attachments'][0]['uri'];

  $form['#attributes']['class'][] = 'be-forms be-forms-custom';

  $form['form_title'] = array(
    '#prefix' => '<div class="form-title">',
    '#suffix' => '</div>',
    '#markup' => '<h2>' . t('Send New Proposal') . '</h2>',
  );

  $form['subject'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('Subject:'),
    '#default_value' => 'Plan Proposal for ' . $company_name . ' ' . format_date(time(), 'custom', t('m/d/Y')),
  );

  $form['to'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#title' => t('To:'),
    '#default_value' => $_SESSION['proposal_recipient']['to'],
  );

  $form['show_attachment'] = array(
    '#prefix' => '<div class="show-attachment">',
    '#suffix' => '</div>',
    '#markup' => '<span class="label">Attachment:</span> <a href="' . $attachment_download_path . '" class="orange-font">' . $attachment_filename . '</a>',
  );

  $form['message'] = array(
    '#type' => 'textarea',
    '#attributes' => array(
      'placeholder' => t('Enter message here ..'),
    ),
  );

  $form['submit_container'] = array(
    '#type' => 'container',
  );

  $form['submit_container']['cancel'] = array(
    '#markup' => '<a class="gray-btn" href="/" onClick="parent.Lightbox.end();">Cancel</a>',
  );

  $form['submit_container']['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('green-btn'),
    ),
    '#value' => t('Send'),
  );

  return $form;
}

/**
 * Implements hook_form_submit().
 *
 * Submit handler for add proposal form (email).
 */
function bullseye_proposals_email_form_submit($form, &$form_state) {
  global $user;
  $data = $form_state['values'];

  $be = new Bullseye($user);
  $be->sendProposal($data);

  $company_id = $_SESSION['proposal_recipient']['company_id'];

  Bullseye::createSystemGeneratedActivity('proposal', $company_id);

}

/**
 * Implements hook_mail().
 */
function bullseye_proposals_mail($key, &$message, $params) {
  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];

  // Add attachment when available.
  if (isset($params['attachment'])) {
    $message['params']['attachments'][] = $params['attachment'];
  }
}
